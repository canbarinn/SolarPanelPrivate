/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Solar, SolarInterface } from "../Solar";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "capacity",
        type: "uint256",
      },
    ],
    name: "createPool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "poolID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "depositProfit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getROI",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "poolID",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "invest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "day",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "yearlyProfitRatio",
        type: "uint256",
      },
    ],
    name: "setROI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "poolID",
        type: "uint256",
      },
    ],
    name: "withdrawProfit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061024a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063269d7b051461006757806337dc0aba146100855780638259e6a0146100a1578063a2a813cb146100bd578063d82a2bea146100d9578063d87aa643146100f5575b600080fd5b61006f610111565b60405161007c919061015b565b60405180910390f35b61009f600480360381019061009a91906101a7565b61011a565b005b6100bb60048036038101906100b691906101e7565b610125565b005b6100d760048036038101906100d291906101a7565b61012d565b005b6100f360048036038101906100ee91906101e7565b610136565b005b61010f600480360381019061010a91906101a7565b610139565b005b60008054905090565b816000819055505050565b600054905050565b60005490505050565b50565b60005491505050565b6000819050919050565b61015581610142565b82525050565b6000602082019050610170600083018461014c565b92915050565b600080fd5b61018481610142565b811461018f57600080fd5b50565b6000813590506101a18161017b565b92915050565b600080604083850312156101be576101bd610176565b5b60006101cc85828601610192565b92505060206101dd85828601610192565b9150509250929050565b6000602082840312156101fd576101fc610176565b5b600061020b84828501610192565b9150509291505056fea2646970667358221220bf53a68f3e31258a930919d1166806ed19f108c47a3020497ea8820f5dc9049764736f6c63430008110033";

type SolarConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SolarConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Solar__factory extends ContractFactory {
  constructor(...args: SolarConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Solar> {
    return super.deploy(overrides || {}) as Promise<Solar>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Solar {
    return super.attach(address) as Solar;
  }
  override connect(signer: Signer): Solar__factory {
    return super.connect(signer) as Solar__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SolarInterface {
    return new utils.Interface(_abi) as SolarInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Solar {
    return new Contract(address, _abi, signerOrProvider) as Solar;
  }
}
